#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('mockbuster:server');
var http = require('http');
var mongoose = require('mongoose');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Connect to MongoDB
 **/

 var mongoDbUrl = process.env.MONGODB_URL || 'mongodb://localhost/mockbustermongo';
 mongoose.connect(mongoDbUrl, {
   useNewUrlParser: true,
   useUnifiedTopology: true
 });

 var db = mongoose.connection;
 db.on('error', console.error.bind(console, 'MongoDB connection error:'));

/**
 * Create HTTP server.
 */
 var server = http.createServer(app);
 var io = require('socket.io').listen(server);
 //setting up socket connection

 // io.sockets.on('connection', function(socket){
 //   console.log('a user connected :)');
 //   socket.on('username', function(username){
 //     socket.username = username;
 //     io.emit('is_online', 'ðŸ”µ <i>' + socket.username + ' joined the chat...</i>')
 //   });
 //   socket.on('disconnect', function(){
 //     io.emit('is_online', 'ðŸ”´ <i>' + socket.username + ' left the chat...</i>')
 //     console.log('user disconnected! :(')
 //   })
 //   socket.on('chat message', function(msg){
 //     io.emit('chat message', '<strong>' + socket.username +'</strong>: ' + msg);
 //     console.log('message: ' + msg);
 //   });
 //   socket.on('typing', (type) => {
 //     socket.emit('typing', socket.username)
 //   })
 // });

 const rooms = { }

 // app.get('/chat', (req, res) => {
 //   res.render('chat/index', { rooms: rooms })
 // })

 // app.post('/chat/room', (req, res) => {
 //   if (rooms[req.body.room] != null) {
 //     return res.redirect('/chat')
 //   }
 //   rooms[req.body.room] = { users: {} }
 //   res.redirect(req.body.room)
 //   // Send message that new room was created
 //   io.emit('room-created', req.body.room)
 // })

 // app.get('/chat/:room', (req, res) => {
 //   if (rooms[req.params.room] == null) {
 //     return res.redirect('/chat')
 //   }
 //   res.render('chat/room', { roomName: req.params.room })
 // })

 // server.listen(3000)

 io.on('connection', socket => {
   socket.on('new-user', (room, name) => {
     socket.join(room)
     rooms[room].users[socket.id] = name
     socket.to(room).broadcast.emit('user-connected', name)
   })
   socket.on('send-chat-message', (room, message) => {
     socket.to(room).broadcast.emit('chat-message', { message: message, name: rooms[room].users[socket.id] })
   })
   socket.on('disconnect', () => {
     getUserRooms(socket).forEach(room => {
       socket.to(room).broadcast.emit('user-disconnected', rooms[room].users[socket.id])
       delete rooms[room].users[socket.id]
     })
   })
 })

 function getUserRooms(socket) {
   return Object.entries(rooms).reduce((names, [name, room]) => {
     if (room.users[socket.id] != null) names.push(name)
     return names
   }, [])
 }
/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);
console.log("Express server listening on port " + app.get('port'))

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
